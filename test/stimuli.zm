
enum ItemType
{
    FAMILIARISATION,    // Stimulus from fam phase
    TESTA,
    TESTB,
}

record TestItem
{
    int             id;         // The id of the trial.
    ItemType        type;       // What type of stimulus is presented.
    string          snd_fn;     // Which stimulus is presented.
    SoundDirection  dir;        // from which direction should the sound
                                // be played.
}

void append_test_item(TestItem[] items, TestItem item)
{
    items.size = items.size + 1;
    items[items.size - 1] = item;
}

void append_test_items(TestItem[] items1, TestItem[] items2)
{
    int i = 0;
    while (i < items2.size) {
        append_test_item(items1, items2[i]);
        i++;
    }
}

/**
 * Can be expanded to multiple groups.
 */
TestItem[..][..] fam_items = {
    {
        {1, FAMILIARISATION, "fam_xyx_0_48000", SND_DIRECTION_FRONT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_0_48000", SND_DIRECTION_FRONT},
    },
    {
        {1, FAMILIARISATION, "fam_xyx_0_48000", SND_DIRECTION_FRONT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_0_48000", SND_DIRECTION_FRONT},
    }
};

/****** items for the test items ******/

TestItem[..] test_items_a = {
    {1,  TESTA, "test_xyx_ba_po_ba_48000", SND_DIRECTION_LEFT},
    {2,  TESTA, "test_xyx_ko_ga_ko_48000", SND_DIRECTION_RIGHT},
    {3,  TESTA, "test_xyy_ba_po_po_48000", SND_DIRECTION_LEFT},
    {4,  TESTA, "test_xyy_ko_ga_ga_48000", SND_DIRECTION_RIGHT},
};

TestItem[..] test_items_b = {
    {5,  TESTB, "test_xyx_ba_po_ba_48000", SND_DIRECTION_RIGHT},
    {6,  TESTB, "test_xyx_ko_ga_ko_48000", SND_DIRECTION_LEFT},
    {7,  TESTB, "test_xyy_ba_po_po_48000", SND_DIRECTION_RIGHT},
    {8,  TESTB, "test_xyy_ko_ga_ga_48000", SND_DIRECTION_LEFT},
};

TestItem[..] test_items = {
};

void prepare_test_items(int ppid)
{
    // Append the items to the test items.
    if (selected_group == FAM_XYX_A || selected_group == FAM_XYY_A) {
        test_items_a.shuffle(0, -1);
        append_test_items(test_items, test_items_a);
        test_items_b.shuffle(0, -1);
        append_test_items(test_items, test_items_b);
        test_items_a.shuffle(0, -1);
        append_test_items(test_items, test_items_a);
    }
    else if(selected_group == FAM_XYX_B || selected_group == FAM_XYY_B) {
        test_items_b.shuffle(0, -1);
        append_test_items(test_items, test_items_b);
        test_items_a.shuffle(0, -1);
        append_test_items(test_items, test_items_a);
        test_items_b.shuffle(0, -1);
        append_test_items(test_items, test_items_b);
    }
    else {
        print_error("Oops invalid group chosen or programming error.");
        // force zep to quit straight away.
        int quit = 1/0;
    }
}

