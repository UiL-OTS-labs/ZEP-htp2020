
enum ItemType
{
    FAMILIARISATION,    // Stimulus from fam phase
    TEST,
}

record TestItem
{
    int             id;         // The id of the trial.
    ItemType        type;       // The type of trial
    string          snd_fn;     // Which stimulus is presented.
    SoundDirection  dir;        // from which direction should the sound
                                // be played.
}

void append_test_item(TestItem[] items, TestItem item)
{
    items.size = items.size + 1;
    items[items.size - 1] = item;
}

void append_test_items(TestItem[] items1, TestItem[] items2)
{
    int i = 0;
    while (i < items2.size) {
        append_test_item(items1, items2[i]);
        i++;
    }
}

TestItem[..][..] fam_items = {
    {
        {1, FAMILIARISATION, "fam_xyx_0", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyx_1", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyx_2", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyx_3", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyx_4", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyx_5", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyx_6", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyx_7", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_0", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_1", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_2", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_3", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_4", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_5", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_6", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
    {
        {1, FAMILIARISATION, "fam_xyy_7", SND_DIRECTION_RIGHT | SND_DIRECTION_LEFT},
    },
};

/****** items for the test items ******/

// The last column will be changed programmatically.
// The id will also be added dynamically.
TestItem[..] test_items_base = {
    {1, TEST, "test_stream_ba_po_ba_15", SND_DIRECTION_LEFT},
    {2, TEST, "test_stream_ko_ga_ko_15", SND_DIRECTION_LEFT},
    {3, TEST, "test_stream_ba_po_po_15", SND_DIRECTION_LEFT},
    {4, TEST, "test_stream_ko_ga_ga_15", SND_DIRECTION_LEFT}
};

SoundDirection[..] sound_dirs = {
    SND_DIRECTION_LEFT,
    SND_DIRECTION_LEFT,
    SND_DIRECTION_RIGHT,
    SND_DIRECTION_RIGHT
};

TestItem[..] test_items = {
};

void prepare_test_items(int ppid)
{
    // Append the items to the test items.
    int i = 0;
    int reps = 3;

    while (i < reps) {
        test_items_base.shuffle(0, -1);
        sound_dirs.shuffle(0, -1);
        int j = 0;
        while (j < test_items_base.size) {
            test_items_base[j].dir = sound_dirs[j];
            append_test_item(test_items, test_items_base[j]);
            j++;
        }
        i++;
    }
}

