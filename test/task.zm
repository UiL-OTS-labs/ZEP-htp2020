
import hvf_event;
import defs;
import output;

import test_page;
import stimuli;

Block task
{
    int current_trial;

    on_event:entry()
    {
        control.target = this;

        control.disable_keys();
        control.enable_key(KEY_Shift_L, EVENT_STOP_LOOKING);
        control.enable_key(' '        , EVENT_START_ATTENTION);
        control.enable_key(KEY_Shift_R, EVENT_START_LOOKING);

        control.button_box.disable_buttons();
        control.button_box.enable_button(int(BUTTON_LEFT), EVENT_STOP_LOOKING);
        control.button_box.enable_button(int(BUTTON_LOWER),EVENT_START_ATTENTION);
        control.button_box.enable_button(int(BUTTON_RIGHT),EVENT_START_LOOKING);

        int ppid = int(control.ppid);
        if (ppid == 0 && expdb.experiment.status != EXP_STATUS_PREPARING) {
            print_error("Oops ppid == 0, did you enter a valid participant id?"
                        + "\n"
                        );
            print_error("ppid = " + control.ppid + "\n");
            terminate "Invalid participant id\n";
        }
        prepare_test_items(ppid);
    }

    on_event:exit()
    {
        control.button_box.disable_buttons();
    } 

    //--------- Familiarization -------

    Block familiarization
    {
        on_event:entry()
        {
            prepare_fam_items();
            num_cycles = fam_items.size;
            if (have_flag("short")) {
                num_cycles = 5;
            }
        }

        on_event:exit()
        {
            save_fam_output();
        }
        
        Trial trial
        {
            on_event:entry()
            {
                TestItem item = fam_items[familiarization.cycle];
                test_page.action(
                        this,
                        reference_time,
                        item,
                        familiarization.cycle
                        );
            }

            on_event:exit()
            {
                TestOutput output;

                output.phase    = PHASE_FAM;

                fam_output_append (output);
            }
        }
    }

    //--------- Test -----------

    Block test
    {
        TestItem[] item_list;

        on_event:exit()
        {
            save_output();
        }
            

        Trial grab_attention
        {
            on_event:entry()
            {
                grab_attention.leave();
                println("either remove or do something useful.");
            }
        }

        Trial trial
        {
            on_event:entry()
            {
                TestItem item = test_items[test.cycle];
                test_page.action(
                        this,
                        reference_time,
                        item,
                        test.cycle + 1
                        );
                task.current_trial++;
                control.set_current_trial(task.current_trial);
            }
            
            on_event:exit()
            {
                TestOutput output;

                output.trialnum = test.cycle + 1;
                output.lt       = int(test_page.response.cumlt);
                output.nlt      = int(test_page.response.cumnlt);
                output.looks    = test_page.response.nlooks;
                output.lookaways= test_page.response.nlookaways;
                output.phase    = PHASE_TEST;

                output_append(output);

            }
        }
    }
}


void action (Part caller)
{
    task.enter(caller);
}
