
import defs;
import test_page_right;
import test_page_left;

Page test_page
{
    TestItem    item;           // the currently presented item.
    int         nth_trial;      // the number of the current trial.

    //Object      caller;

    // This timer is started at the beginning of a trial if it is fired
    // the trial ends because of maximum trial duration is called.
    Timer max_trial_dur_timer
    {
        on_event:expire()
        {
            response.process_hit(event_time, EVENT_STOP_TIMER);
        }
    }
    
    // Pressing the left button on the button box starts this timer
    // if the timer expires the trial will be aborted.
    Timer abort_trial_timer
    {
        on_event:expire()
        {
            response.process_hit(event_time, EVENT_STOP_TIMER);
        }
    }

    on_event:init()
    {
        fill_pattern_color = color:black;
    }

    // Key press doesn't work properly since the baby window is a output
    // only window.
    on_event:key_press()
    {
        if      (input_key == KEY_Shift_L)
            response.process_hit(event_time, EVENT_STOP_LOOKING);
        else if (input_key == KEY_Shift_R)
            response.process_hit(event_time, EVENT_START_LOOKING);
        else
            handle_special_key(this, input_key, input_modifiers);
    }

    on_event:message()
    {
        response.process_hit(event_time, message_arg);
        attention_resp.process_hit(event_time, message_arg);
        side_resp.process_hit(event_time, message_arg);
    }
    
    Response attention_resp
    {
        void process_hit(time t, int event)
        {
            HitType validity = hit(t);
            
            if (validity == HIT_VALID) {
                if (event == EVENT_START_LOOKING) {
                    ignore_remaining_hits();
                    action_side(event_time);
                }
            }
        }
    }

    Response side_resp
    {
        void process_hit(time t, int event)
        {
            HitType validity = hit(t);
            
            if (validity == HIT_VALID) {
                if (event == EVENT_START_LOOKING) {
                    ignore_remaining_hits();
                    action_trial(event_time);
                }
            }
        }
    }

    Response response
    {
        bool    is_looking;
        time    lookstart;
        time    nolookstart;
        dur     cumlt;
        dur     cumnlt;
        int     nlookaways;
        int     nlooks;

        on_event:start()
        {
            clear();
            lookstart = event_time;
            // assume the child is looking.
            is_looking = true;
        }

        void clear()
        {
            is_looking  = true;
            lookstart   = time(0);
            nolookstart = time(0);
            cumlt       = 0ms;
            cumnlt      = 0ms;
            nlookaways  = 0;
            nlooks      = 1; // The infant is always looking at the start
                             // of the trial.
        }

        void process_hit(time t, int event)
        {
            HitType validity = hit(t);
            //println("Process hit: " + string(validity) + " " + event);
            
            if (validity == HIT_VALID) {
                if (event == EVENT_STOP_LOOKING) { // start abort timer
                    if (!is_looking)
                        return; // ignore, because we weren't looking.
                    is_looking = false;
                    nolookstart = t;
                    cumlt += (t - lookstart);

                    abort_trial_timer.start(t + MAX_LOOK_AWAY_DURATION);
                    control.stop_clock(t);
                    nlookaways++;
                }
                else if (event == EVENT_START_LOOKING) {
                    if(is_looking)
                        return; // ignore, because we already were looking.
                    is_looking = true;
                    lookstart = t;
                    cumnlt += (t - nolookstart);

                    control.start_clock(t);
                    abort_trial_timer.abort();
                    nlooks++;
                }
                else if (event == EVENT_STOP_TIMER) {
                    if (is_looking)
                        cumlt += (t - lookstart);
                    else
                        cumnlt+= (t - nolookstart);

                    // abort trial
                    done(CONTINUE);
                }
            }
        }
    }

    VerticalLayout layout
    {
        on_event:init()
        {
            spacing = 0;
            size    = 1920,1080;
            fill_pattern_color = color:black;
        }

        CanvasGadget canvas
        {
            real cir_radius;
            real outer_radius;

            on_event:init()
            {
                size = layout.width, layout.height;
                offset_x = width/2;
                offset_y = height/2;

                cir_radius   = 50;
                outer_radius = 200;
                //Hide the canvas frame
                fill_pattern_color = color:black;

                is_visible = false;
            }

            on_event:start()
            {
                //println("Releasing clock.");
                control.release_clock(event_time);
            }

            on_event:finish()
            {
                this.start(event_time + LIGHT_ISI, LIGHT_DURATION);
            }

            CircleShape c0
            {
                on_event:init()
                {
                    x = 0;
                    y = 0;
                    radius = cir_radius;
                    fill_pattern_color = LIGHT_COLOR;
                    is_visible = true;
                }
            }

            CircleShape c1
            {
                on_event:init()
                {
                    x = sin(0 * TWOPI) * outer_radius;
                    y = cos(0 * TWOPI) * outer_radius;
                    radius = cir_radius; 
                    fill_pattern_color = LIGHT_COLOR;
                    is_visible = true;
                }
            }

            CircleShape c2
            {
                on_event:init()
                {
                    x = sin(1.0/5.0 * TWOPI) * outer_radius;
                    y = cos(1.0/5.0 * TWOPI) * outer_radius;
                    radius = cir_radius;
                    fill_pattern_color = LIGHT_COLOR;
                    is_visible = true;
                }
            }

            CircleShape c3
            {
                on_event:init()
                {
                    x = sin(2.0/5.0 * TWOPI) * outer_radius;
                    y = cos(2.0/5.0 * TWOPI) * outer_radius;
                    radius = cir_radius;
                    fill_pattern_color = LIGHT_COLOR;
                    is_visible = true;
                }
            }

            CircleShape c4
            {
                on_event:init()
                {
                    x = sin(3.0/5.0 * TWOPI) * outer_radius;
                    y = cos(3.0/5.0 * TWOPI) * outer_radius;
                    radius = cir_radius;
                    fill_pattern_color = LIGHT_COLOR;
                    is_visible = true;
                }
            }

            CircleShape c5
            {
                on_event:init()
                {
                    x = sin(4.0/5.0 * TWOPI) * outer_radius;
                    y = cos(4.0/5.0 * TWOPI) * outer_radius;
                    radius = cir_radius;
                    fill_pattern_color = LIGHT_COLOR;
                    is_visible = true;
                }
            }
        }

        void reset()
        {
            full_abort();
            canvas.abort();
            canvas.is_visible    = false;
        }

        void start_stimulus(time t, dur duration)
        {
            canvas.start(t, duration);
        }
    }

    SoundChain audio
    {
        int nth_rep;

        SoundFile clip{}
        SoundPlayback playback{}

        SoundDirection dir;

        on_event:start()
        {
            int lights = 0;
            if (dir & SND_DIRECTION_LEFT)
                lights |= LEFT_SIDE;
            if (dir & SND_DIRECTION_FRONT)
                lights |= FRONT_SIDE;
            if (dir & SND_DIRECTION_RIGHT)
                lights |= RIGHT_SIDE;

            control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
            control.show_speaker_icon(lights);

            //perhaps save audio start even to detailed log.
        }

        on_event:finish()
        {
            control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
            // perhaps save audio end event to detailed log.

            StimOutput output;
            time begin = zero_time();
            output.trial    = nth_trial;
            output.tstart   = int(start_time - begin);
            output.tend     = int(finish_time - begin);
            output.stimulus = clip.file;

            stimulus_output_append(output);

            if (nth_rep < NUM_REPETITIONS){
                this.play(
                    event_time + TEST_ISI,
                    item.dir,
                    item.snd_fn
                    );
            }
            else {
                response.process_hit(event_time, EVENT_STOP_TIMER);
            }
        }

        time play(time t, SoundDirection direction, string fn)
        {
            abort();
            dir = direction;
            nth_rep += 1;

            playback.set_scaling(0.0); // all channels off.

            // Turn scaling back on for the proper channels
            // keep in mind that the front right isn't wired (2017)
            // and the front left represents the front.
            if (dir & SND_DIRECTION_FRONT) {
                playback.set_scaling(CHANNEL_FRONT_LEFT , 1.0);
                playback.set_scaling(CHANNEL_FRONT_RIGHT, 1.0);
            }
            else {
                playback.set_scaling(CHANNEL_FRONT_LEFT , 0.0);
                playback.set_scaling(CHANNEL_FRONT_RIGHT, 0.0);
            }

            if (dir & SND_DIRECTION_LEFT)
                playback.set_scaling(CHANNEL_REAR_LEFT, 1.0);
            else 
                playback.set_scaling(CHANNEL_REAR_LEFT, 0.0);
            
            if (dir & SND_DIRECTION_RIGHT)
                playback.set_scaling(CHANNEL_REAR_RIGHT, 1.0);
            else 
                playback.set_scaling(CHANNEL_REAR_RIGHT, 0.0);

            playback.device = sound_output_device;
            clip.file = stimuli_dir() + "sounds/" +fn + ".wav";

            start(t);
            return expected_start_time;
        }

        void clear()
        {
            nth_rep = 0;
        }
    }

    void done(int message)
    {
        audio.abort();
        signal_target(message);
        layout.reset();
        max_trial_dur_timer.abort();
        abort_trial_timer.abort();
        control.erase_clock();
        control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
        test_page_right.clear();
        test_page_left.clear();
    }

    void setup(TestItem[] items)
    {
    }

    time action(Object          caller,
                time            start,
                TestItem        item,
                int             trial_num
                )
    {
        this.item       = item;
        time tref       = test_window1.show_test_page(this, start);
        test_window_left.show_test_page(test_page_left, start);
        test_window_right.show_test_page(test_page_right, start);
        
        nth_trial       = trial_num;        
        // Doesn't work because of std_baby_windows1.zm
        // test_window1.activate(); // to capture keyboard events.
        this.target     = caller;

        attention_resp.start(tref);
        layout.start_stimulus(tref, LIGHT_ISI);

        control.target = this;

        return tref;
    }

    time action_side(time start)
    {
        side_resp.start(now());
        if (item.dir == SND_DIRECTION_LEFT) {
            test_page_left.action(start);
        }
        else if (item.dir == SND_DIRECTION_RIGHT) {
            test_page_right.action(start);
        }
        else {
            print_error(
                "Error: action_side(): not presenting from left or right\n"
                );
        }
        return start;
    }

    time action_trial(time start)
    {
        control.reset_clock();
        control.begin_clock();
        control.start_clock(start);

        audio.play(start + TEST_ISI, item.dir, item.snd_fn);


        return start;
    }
}


